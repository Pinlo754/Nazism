"use client"

import React, { useState, useRef, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { MessageCircle, Send, X, Bot, User, Minimize2, Maximize2, AlertCircle, Expand, Shrink } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai"

interface Message {
  id: string
  content: string
  sender: 'user' | 'ai'
  timestamp: Date
  modelUsed?: string
}

interface AIChatboxProps {
  className?: string
}

const AIChatbox = ({ className = "" }: AIChatboxProps) => {
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [isExpanded, setIsExpanded] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'Xin ch√†o! T√¥i l√† AI Assistant ƒë∆∞·ª£c trang b·ªã Gemini AI, chuy√™n v·ªÅ l·ªãch s·ª≠ Ch·ªß nghƒ©a Qu·ªëc x√£. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ b·∫•t k·ª≥ ƒëi·ªÅu g√¨ li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ n√†y v√† t√¥i s·∫Ω cung c·∫•p th√¥ng tin chi ti·∫øt, ch√≠nh x√°c.',
      sender: 'ai',
      timestamp: new Date()
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [apiStatus, setApiStatus] = useState<'checking' | 'configured' | 'not-configured'>('checking')
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    // Check API key status on mount
    const checkApiStatus = async () => {
      const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY
      if (!API_KEY || API_KEY === 'your_gemini_api_key_here') {
        setApiStatus('not-configured')
        return
      }
      
      try {
        // Test API connectivity with a simple request
        const genAI = new GoogleGenerativeAI(API_KEY)
        const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" })
        
        // Simple test prompt
        const result = await model.generateContent("Test")
        const response = await result.response
        
        if (response.text()) {
          console.log('‚úÖ API test successful with gemini-2.5-flash')
          setApiStatus('configured')
        } else {
          console.warn('API test returned empty response')
          setApiStatus('not-configured')
        }
      } catch (error) {
        console.error('API test failed:', error)
        setApiStatus('not-configured')
      }
    }
    
    checkApiStatus()
  }, [])

  // Test API connectivity and find working model
  const testAPIConnectivity = async () => {
    const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY
    if (!apiKey) {
      console.log('‚ùå No API key found')
      return
    }

    console.log('üîç Testing API connectivity...')
    const genAI = new GoogleGenerativeAI(apiKey)
    const modelsToTest = [
      "gemini-2.5-flash",
      "gemini-2.5-pro",
      "gemini-2.0-flash",
      "gemini-2.0-flash-001",
      "gemini-2.5-flash-preview-05-20",
      "gemini-2.5-pro-preview-06-05",
      "gemini-1.5-flash-latest",
      "gemini-1.5-flash", 
      "gemini-1.5-pro-latest",
      "gemini-1.5-pro",
      "gemini-pro"
    ]
    
    for (const modelName of modelsToTest) {
      try {
        const model = genAI.getGenerativeModel({ model: modelName })
        const result = await model.generateContent("Hi")
        const response = await result.response
        if (response.text()) {
          console.log(`‚úÖ Model ${modelName} is working`)
          return modelName // Return first working model
        }
      } catch (error) {
        console.log(`‚ùå Model ${modelName} failed:`, error)
      }
    }
    console.log('‚ùå No working models found')
    return null
  }

  useEffect(() => {
    // Check API key status on mount
    const checkApiStatus = () => {
      const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY
      if (!API_KEY) {
        setApiStatus('not-configured')
      } else {
        setApiStatus('configured')
      }
    }
    
    checkApiStatus()
  }, [])

  // Call Gemini AI API using Google SDK
  const callGeminiAPI = async (userMessage: string): Promise<{text: string, modelUsed: string}> => {
    try {
      const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY
      if (!API_KEY || API_KEY === 'your_gemini_api_key_here') {
        throw new Error('API_KEY_NOT_CONFIGURED')
      }

      // Initialize Gemini AI
      const genAI = new GoogleGenerativeAI(API_KEY)
      
      // Try different models in order of preference
      const models = [
        "gemini-2.5-flash",
        "gemini-2.5-pro", 
        "gemini-2.0-flash",
        "gemini-2.0-flash-001",
        "gemini-2.5-flash-preview-05-20",
        "gemini-2.5-pro-preview-06-05",
        "gemini-1.5-flash-latest",
        "gemini-1.5-flash",
        "gemini-1.5-pro-latest", 
        "gemini-1.5-pro",
        "gemini-pro"
      ]

      const prompt = `B·∫°n l√† m·ªôt chuy√™n gia l·ªãch s·ª≠ v·ªÅ Ch·ªß nghƒ©a Qu·ªëc x√£ v√† Holocaust. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch chi ti·∫øt, ch√≠nh x√°c v√† c√≥ t√≠nh gi√°o d·ª•c. C√¢u tr·∫£ l·ªùi n√™n b·∫±ng ti·∫øng Vi·ªát v√† t·∫≠p trung v√†o kh√≠a c·∫°nh l·ªãch s·ª≠, gi√°o d·ª•c.

Ng·ªØ c·∫£nh: Website n√†y l√† v·ªÅ l·ªãch s·ª≠ Ch·ªß nghƒ©a Qu·ªëc x√£ t·ª´ 1919-1945, bao g·ªìm c√°c ph·∫ßn Timeline, Atrocities, Analysis v√† References.

C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${userMessage}

H√£y tr·∫£ l·ªùi m·ªôt c√°ch:
- Chi ti·∫øt nh∆∞ng d·ªÖ hi·ªÉu
- C√≥ t√≠nh gi√°o d·ª•c cao
- ƒê·ªÅ c·∫≠p ƒë·∫øn c√°c s·ª± ki·ªán, nh√¢n v·∫≠t, ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ
- K·∫øt n·ªëi v·ªõi b√†i h·ªçc l·ªãch s·ª≠
- ƒê·ªô d√†i kho·∫£ng 150-300 t·ª´`

      for (const modelName of models) {
        try {
          console.log(`Trying model: ${modelName}`)
          
          const model = genAI.getGenerativeModel({ 
            model: modelName,
            generationConfig: {
              temperature: 0.7,
              topK: 40,
              topP: 0.95,
              maxOutputTokens: 2048,
            },
            safetySettings: [
              {
                category: HarmCategory.HARM_CATEGORY_HARASSMENT,
                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
              },
              {
                category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
              },
              {
                category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
              },
              {
                category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
              }
            ]
          })

          const result = await model.generateContent(prompt)
          const response = await result.response
          const text = response.text()

          if (text && text.trim()) {
            console.log(`‚úÖ Successfully got response from: ${modelName}`)
            return { text, modelUsed: modelName }
          } else {
            console.warn(`Empty response from: ${modelName}`)
            continue
          }
        } catch (modelError) {
          console.error(`Error with model ${modelName}:`, modelError)
          
          // Log detailed error information
          if (modelError instanceof Error) {
            console.error(`Error message: ${modelError.message}`)
            console.error(`Error stack: ${modelError.stack}`)
          }
          
          continue // Try next model
        }
      }

      throw new Error('All models failed to generate response')
    } catch (error) {
      console.error('Gemini AI Error:', error)
      
      // Handle specific API key error
      if (error instanceof Error && error.message === 'API_KEY_NOT_CONFIGURED') {
        throw new Error('API_KEY_SETUP_REQUIRED')
      }
      
      // Fallback to predefined responses
      return { text: getFallbackResponse(userMessage), modelUsed: 'local-fallback' }
    }
  }

  // Fallback responses khi API kh√¥ng kh·∫£ d·ª•ng
  const getFallbackResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase()
    
    if (message.includes('hitler') || message.includes('adolf')) {
      return 'Adolf Hitler (1889-1945) l√† th·ªß lƒ©nh c·ªßa ƒê·∫£ng Qu·ªëc x√£ ƒê·ª©c v√† Tr√πm ph√°t x√≠t t·ª´ 1933-1945. √îng sinh ra t·∫°i √Åo, t·ª´ng l√† h·ªça sƒ© th·∫•t b·∫°i tr∆∞·ªõc khi gia nh·∫≠p ch√≠nh tr·ªã. Hitler ch·ªãu tr√°ch nhi·ªám ch√≠nh v·ªÅ Holocaust v√† Th·∫ø chi·∫øn II ·ªü ch√¢u √Çu, d·∫´n ƒë·∫øn c√°i ch·∫øt c·ªßa h√†ng ch·ª•c tri·ªáu ng∆∞·ªùi.'
    }
    
    if (message.includes('holocaust') || message.includes('di·ªát ch·ªßng')) {
      return 'Holocaust l√† cu·ªôc di·ªát ch·ªßng c√≥ h·ªá th·ªëng c·ªßa kho·∫£ng 6 tri·ªáu ng∆∞·ªùi Do Th√°i v√† h√†ng tri·ªáu ng∆∞·ªùi kh√°c do ch·∫ø ƒë·ªô Nazi th·ª±c hi·ªán t·ª´ 1941-1945. ƒê√¢y l√† m·ªôt trong nh·ªØng t·ªôi √°c ch·ªëng l·∫°i nh√¢n lo·∫°i nghi√™m tr·ªçng nh·∫•t trong l·ªãch s·ª≠, ƒë∆∞·ª£c th·ª±c hi·ªán th√¥ng qua m·∫°ng l∆∞·ªõi c√°c tr·∫°i t·∫≠p trung v√† tr·∫°i di·ªát ch·ªßng kh·∫Øp ch√¢u √Çu.'
    }
    
    if (message.includes('auschwitz') || message.includes('tr·∫°i t·∫≠p trung')) {
      return 'Auschwitz-Birkenau l√† ph·ª©c h·ª£p tr·∫°i t·∫≠p trung v√† di·ªát ch·ªßng l·ªõn nh·∫•t c·ªßa Nazi, n·∫±m ·ªü Ba Lan. Kho·∫£ng 1.1 tri·ªáu ng∆∞·ªùi ƒë√£ thi·ªát m·∫°ng t·∫°i ƒë√¢y t·ª´ 1940-1945, ch·ªß y·∫øu l√† ng∆∞·ªùi Do Th√°i. Auschwitz ƒë√£ tr·ªü th√†nh bi·ªÉu t∆∞·ª£ng c·ªßa Holocaust v√† l√† b√†i h·ªçc v·ªÅ t·∫ßm quan tr·ªçng c·ªßa vi·ªác "Never Again".'
    }
    
    return 'T√¥i ƒëang g·∫∑p s·ª± c·ªë k·∫øt n·ªëi v·ªõi AI. B·∫°n c√≥ th·ªÉ kh√°m ph√° th√™m th√¥ng tin chi ti·∫øt trong c√°c ph·∫ßn Timeline, Atrocities, Analysis v√† References tr√™n website n√†y. H√£y th·ª≠ h·ªèi l·∫°i sau ho·∫∑c duy·ªát qua c√°c n·ªôi dung c√≥ s·∫µn ƒë·ªÉ t√¨m hi·ªÉu th√™m v·ªÅ l·ªãch s·ª≠ Ch·ªß nghƒ©a Qu·ªëc x√£.'
  }

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: 'user',
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    const currentInput = inputValue
    setInputValue('')
    setIsTyping(true)
    setError(null)

    try {
      // Call Gemini AI API
      const aiResponse = await callGeminiAPI(currentInput)
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: aiResponse.text,
        sender: 'ai',
        timestamp: new Date(),
        modelUsed: aiResponse.modelUsed
      }
      
      setMessages(prev => [...prev, aiMessage])
    } catch (error) {
      console.error('Error getting AI response:', error)
      
      if (error instanceof Error && error.message === 'API_KEY_SETUP_REQUIRED') {
        setError('üîë C·∫ßn c·∫•u h√¨nh API key - Xem h∆∞·ªõng d·∫´n b√™n d∆∞·ªõi')
        
        // Add setup instruction message
        const setupResponse: Message = {
          id: (Date.now() + 1).toString(),
          content: `üöÄ **C√°ch k√≠ch ho·∫°t Gemini AI:**

1. Truy c·∫≠p: https://aistudio.google.com/app/apikey
2. T·∫°o API key m·ªõi (mi·ªÖn ph√≠)
3. Th√™m v√†o file .env.local:
   \`NEXT_PUBLIC_GEMINI_API_KEY=your_api_key_here\`
4. Restart server v√† th·ª≠ l·∫°i

üí° **Hi·ªán t·∫°i:** S·ª≠ d·ª•ng knowledge base c√≥ s·∫µn ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n.`,
          sender: 'ai',
          timestamp: new Date()
        }
        setMessages(prev => [...prev, setupResponse])
      } else {
        setError('C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi AI. ƒêang s·ª≠ d·ª•ng knowledge base c√≥ s·∫µn.')
        
        // Add fallback response
        const fallbackResponse: Message = {
          id: (Date.now() + 1).toString(),
          content: getFallbackResponse(currentInput),
          sender: 'ai',
          timestamp: new Date()
        }
        setMessages(prev => [...prev, fallbackResponse])
      }
    } finally {
      setIsTyping(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSendMessage()
    }
  }

  const toggleChatbox = () => {
    setIsOpen(!isOpen)
    setIsMinimized(false)
    setIsExpanded(false)
  }

  const toggleMinimize = () => {
    setIsMinimized(!isMinimized)
  }

  const toggleExpand = () => {
    setIsExpanded(!isExpanded)
    setIsMinimized(false)
  }

  return (
    <div className={`fixed bottom-4 right-4 z-50 ${className}`}>
      <AnimatePresence>
        {isOpen && (
          <>
            {/* Backdrop overlay for expanded mode */}
            {isExpanded && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40"
                onClick={() => setIsExpanded(false)}
              />
            )}
            
            <motion.div
              initial={{ opacity: 0, scale: 0.8, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.8, y: 20 }}
              transition={{ duration: 0.3 }}
              className={`mb-4 ${isExpanded ? 'fixed inset-4 z-50' : ''}`}
            >
            <Card className={`shadow-2xl border-primary/20 ${
              isExpanded 
                ? 'w-full h-full flex flex-col' 
                : isMinimized 
                  ? 'w-80 h-16' 
                  : 'w-80 h-96'
            }`}>
              {/* Header */}
              <CardHeader className="bg-primary text-primary-foreground p-3 rounded-t-lg">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Bot className="h-5 w-5" />
                    <span className="font-semibold text-sm">AI Assistant</span>
                    <Badge 
                      variant="secondary" 
                      className={`text-xs ${
                        apiStatus === 'configured' 
                          ? 'bg-green-600 text-white' 
                          : apiStatus === 'not-configured'
                          ? 'bg-orange-600 text-white'
                          : 'bg-gray-600 text-white'
                      }`}
                    >
                      {apiStatus === 'configured' ? 'Gemini AI' : apiStatus === 'not-configured' ? 'Local Mode' : 'Checking...'}
                    </Badge>
                    {apiStatus === 'configured' && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={testAPIConnectivity}
                        className="h-6 w-6 p-0 hover:bg-primary-foreground/20"
                        title="Test API Connection"
                      >
                        üîç
                      </Button>
                    )}
                  </div>
                  <div className="flex items-center gap-1">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={toggleExpand}
                      className="h-8 w-8 p-0 hover:bg-primary-foreground/20"
                      title={isExpanded ? "Thu nh·ªè" : "M·ªü r·ªông"}
                    >
                      {isExpanded ? <Shrink className="h-4 w-4" /> : <Expand className="h-4 w-4" />}
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={toggleMinimize}
                      className="h-8 w-8 p-0 hover:bg-primary-foreground/20"
                    >
                      {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={toggleChatbox}
                      className="h-8 w-8 p-0 hover:bg-primary-foreground/20"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>

              {/* Messages */}
              {!isMinimized && (
                <CardContent className={`p-0 flex flex-col ${
                  isExpanded ? 'flex-1' : 'h-80'
                }`}>
                  <div className="flex-1 overflow-y-auto p-4 space-y-3">
                    {/* Error message */}
                    {error && (
                      <motion.div
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="flex justify-center"
                      >
                        <Alert className="bg-red-50 border-red-200 text-red-800 max-w-[90%]">
                          <AlertCircle className="h-4 w-4" />
                          <AlertDescription className="text-sm">
                            {error}
                          </AlertDescription>
                        </Alert>
                      </motion.div>
                    )}

                    {messages.map((message) => (
                      <motion.div
                        key={message.id}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div className={`flex gap-2 ${
                          isExpanded ? 'max-w-[80%]' : 'max-w-[70%]'
                        } ${message.sender === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                          <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center text-white text-sm ${
                            message.sender === 'user' ? 'bg-primary' : 'bg-slate-600'
                          }`}>
                            {message.sender === 'user' ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                          </div>
                          <div className={`px-3 py-2 rounded-lg text-sm ${
                            message.sender === 'user' 
                              ? 'bg-primary text-primary-foreground' 
                              : 'bg-slate-100 text-slate-900'
                          }`}>
                            {message.content}
                            {message.modelUsed && message.sender === 'ai' && (
                              <div className="text-xs opacity-70 mt-1">
                                ‚ú® Powered by {message.modelUsed}
                              </div>
                            )}
                          </div>
                        </div>
                      </motion.div>
                    ))}
                    
                    {/* Typing indicator */}
                    {isTyping && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="flex justify-start"
                      >
                        <div className="flex gap-2 max-w-[70%]">
                          <div className="flex-shrink-0 w-8 h-8 rounded-full bg-slate-600 flex items-center justify-center text-white text-sm">
                            <Bot className="h-4 w-4" />
                          </div>
                          <div className="px-3 py-2 rounded-lg text-sm bg-slate-100 text-slate-900">
                            <div className="flex space-x-1">
                              <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
                              <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                              <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    )}
                    <div ref={messagesEndRef} />
                  </div>

                  {/* Input */}
                  <div className="border-t p-3">
                    <div className="flex gap-2">
                      <Input
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="H·ªèi AI v·ªÅ l·ªãch s·ª≠ Nazi..."
                        className="flex-1 text-sm"
                        disabled={isTyping}
                      />
                      <Button
                        onClick={handleSendMessage}
                        disabled={!inputValue.trim() || isTyping}
                        size="sm"
                        className="px-3"
                      >
                        <Send className="h-4 w-4" />
                      </Button>
                    </div>
                    <p className="text-xs text-muted-foreground mt-1 text-center">
                      {apiStatus === 'configured' 
                        ? 'ƒê∆∞·ª£c h·ªó tr·ª£ b·ªüi Gemini AI - Th√¥ng tin ch√≠nh x√°c & chi ti·∫øt'
                        : apiStatus === 'not-configured'
                        ? 'üîß C·∫•u h√¨nh API key ƒë·ªÉ s·ª≠ d·ª•ng Gemini AI'
                        : 'ƒêang ki·ªÉm tra tr·∫°ng th√°i AI...'
                      }
                    </p>
                  </div>
                </CardContent>
              )}
            </Card>
          </motion.div>
          </>
        )}
      </AnimatePresence>

      {/* Chat toggle button */}
      <motion.div
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <Button
          onClick={toggleChatbox}
          className="h-14 w-14 rounded-full shadow-lg bg-primary hover:bg-primary/90 relative"
        >
          <MessageCircle className="h-6 w-6" />
          {!isOpen && (
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center"
            >
              <span className="text-xs text-white font-bold">!</span>
            </motion.div>
          )}
        </Button>
      </motion.div>
    </div>
  )
}

export default AIChatbox